{"version":3,"sources":["constants/index.js","utils/index.js","app/components/CloseButton/CloseButton.js","app/components/Modal/StackedModal.js","context/ModalContext.js","app/components/Button/Button.js","app/screens/Home/Header/Header.js","app/screens/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WIDTH","validateDimension","type","value","dimension","validateResolution","isNaN","screenWidth","window","screen","availWidth","screenHeight","availHeight","CloseButton","props","onClick","data-testid","className","data","children","StackedModal","forwardRef","ref","useState","getmodalList","setModalList","width","height","stackFomat","finalWidth","finalHeight","useImperativeHandle","onOpen","addModal","onClose","closeModal","modalID","length","id","originalArray","lastObject","pop","formatObject","modalHeader","header","modalContent","content","addObject","prevState","map","style","margin","AppContext","createContext","ModalContex","handleModal","useRef","isChecked","setChecked","Provider","checked","onChange","htmlFor","Button","color","Header","useContext","current","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fca1089.chunk.js","sourcesContent":["export const HEADING = \"modal\";\nexport const WIDTH = \"width\";\nexport const HEIGHT = \"height\";\nexport const NUMBER = \"number\";\nexport const WELCOME = \"Welcome!!\";\nexport const SUB_HEADING = \"Use these buttons to open and close the modals.\";\nexport const BUTTON_OPEN = \"Open\";\nexport const BUTTON_CLOSE = \"Close\";\nexport const CHECKBOX_LABEL =\n  \"Enable this option to add the margin to the modal for testing the Stacked modal LIFO functinality easily.\";\n","/**\n *\n * @param {string} type\n * @param {number} value\n * @returns validate and return the dimension\n */\n\nimport { NUMBER, WIDTH } from \"../constants\";\n\nexport const validateDimension = (type, value) => {\n  const dimension = validateResolution(type, value);\n  const defaultDimension = 200;\n  if (\n    !isNaN(dimension) &&\n    typeof dimension === NUMBER &&\n    dimension >= defaultDimension\n  ) {\n    return `${dimension}px`;\n  }\n  return `${defaultDimension}px`;\n};\n\n/**\n *\n * @param {string} type\n * @param {number} value\n * @returns validate and return the valid width and height\n */\n\nconst validateResolution = (type, value) => {\n  const screenWidth = window.screen.availWidth - 100;\n  const screenHeight = window.screen.availHeight - 300;\n  if (type === WIDTH) {\n    return screenWidth < value ? screenWidth : value;\n  }\n  return screenHeight < value ? screenHeight : value;\n};\n","import React from \"react\";\nimport \"./closebutton.css\";\n\nexport const CloseButton = (props) => {\n  const { onClick } = props;\n  return (\n    <button\n      data-testid=\"closeButton\"\n      className=\"close-button\"\n      type=\"submit\"\n      onClick={(data) => onClick(data)}\n    >\n      {props.children}\n    </button>\n  );\n};\n","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport { HEIGHT, WIDTH } from \"../../../constants\";\nimport { validateDimension } from \"../../../utils\";\nimport { CloseButton } from \"../CloseButton/CloseButton\";\nimport \"./modalstyles.css\";\n\nexport const StackedModal = forwardRef((props, ref) => {\n  const [getmodalList, setModalList] = useState([]);\n\n  const { width, height, stackFomat } = props;\n\n  const finalWidth = validateDimension(WIDTH, width);\n  const finalHeight = validateDimension(HEIGHT, height);\n\n  useImperativeHandle(ref, () => ({\n    onOpen(data) {\n      addModal(data);\n    },\n    onClose() {\n      closeModal();\n    },\n  }));\n\n  const modalID = getmodalList.length >= 0 && getmodalList.length - 1;\n\n  const closeModal = (id = modalID) => {\n    const originalArray = [...getmodalList];\n    const lastObject = originalArray[originalArray.length - 1];\n    if (lastObject && lastObject.id === id) {\n      originalArray.pop();\n      setModalList([...originalArray]);\n    }\n  };\n\n  const formatObject = (data) => {\n    const { header: modalHeader, content: modalContent } = props;\n    const {\n      width = finalWidth,\n      height = finalHeight,\n      header = modalHeader,\n      content = modalContent,\n    } = data;\n    return { width, height, header, content };\n  };\n\n  const addModal = (data = {}) => {\n    const { width, height, header, content } = formatObject(data);\n    const addObject = {\n      id: getmodalList.length,\n      width,\n      height,\n      header,\n      content,\n    };\n    setModalList((prevState) => [...prevState, { ...addObject }]);\n  };\n\n  const onClose = (id) => {\n    closeModal(id);\n  };\n\n  return (\n    <div data-testid=\"stackedModal\">\n      {getmodalList.map((value) => (\n        <div\n          key={value.id}\n          style={stackFomat ? { margin: value.id * 50 } : {}}\n          className={\"modal-position\"}\n        >\n          <div\n            className={\n              stackFomat || value.id === 0 ? \"modal modal-shadow\" : \"modal\"\n            }\n            style={{ width: value.width, height: value.height }}\n          >\n            <div className=\"modal-header\" data-testid=\"modalHeader\">\n              <h2>\n                {value.header}-{value.id + 1}\n              </h2>\n              <CloseButton onClick={() => onClose(value.id)}>\n                &times;\n              </CloseButton>\n            </div>\n            <div className=\"modal-content\" data-testid=\"modalContent\">\n              {value.content}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n});\n","import React, { createContext, Fragment, useRef, useState } from \"react\";\nimport { StackedModal } from \"../app/components/Modal/StackedModal\";\nimport { CHECKBOX_LABEL } from \"../constants\";\nimport \"./modalcontext.css\";\n\nconst AppContext = createContext();\n\nconst ModalContex = ({ children }) => {\n  const handleModal = useRef();\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Fragment>\n      <AppContext.Provider value={{ handleModal }} data-testid=\"context\">\n        {children}\n      </AppContext.Provider>\n\n      <div className=\"checkbox-container\">\n        <input\n          data-testid=\"checkbox\"\n          className=\"checkbox\"\n          type=\"checkbox\"\n          id=\"lifo\"\n          checked={isChecked}\n          onChange={() => setChecked((prevState) => !prevState)}\n        />\n        <label htmlFor=\"lifo\">{CHECKBOX_LABEL}</label>\n      </div>\n      <StackedModal\n        width={400}\n        height={300}\n        header={\"Modal\"}\n        content={\"Content\"}\n        ref={handleModal}\n        stackFomat={isChecked}\n      />\n    </Fragment>\n  );\n};\n\nexport { AppContext, ModalContex };\n","import React from \"react\";\nimport \"./buttonstyles.css\";\n\nexport const Button = (props) => {\n  const { onClick, color, style } = props;\n\n  return (\n    <button\n      data-testid=\"actionButton\"\n      style={style}\n      className={`${\"button\"} ${color}`}\n      onClick={(data) => onClick(data)}\n    >\n      {props.children}\n    </button>\n  );\n};\n","import React, { useContext } from \"react\";\nimport {\n  BUTTON_CLOSE,\n  BUTTON_OPEN,\n  SUB_HEADING,\n  WELCOME,\n} from \"../../../../constants\";\nimport { AppContext } from \"../../../../context/ModalContext\";\nimport { Button } from \"../../../components/Button/Button\";\nimport \"./headerstyles.css\";\n\nexport const Header = () => {\n  const { handleModal } = useContext(AppContext);\n\n  const onOpen = () => {\n    handleModal?.current?.onOpen({\n      height: 200,\n      width: 400,\n      content:\n        \"The Modal is a basic way to present content above an enclosing view.\",\n    });\n  };\n\n  const onClose = () => {\n    handleModal?.current?.onClose();\n  };\n\n  return (\n    <div className=\"container\" data-testid=\"header\">\n      <div className=\"header-left\">\n        <h1>{WELCOME}</h1>\n        <h3>{SUB_HEADING}</h3>\n      </div>\n      <div className=\"header-right\">\n        <Button onClick={onOpen} color=\"primary\" style={{ margin: 20 }}>\n          {BUTTON_OPEN}\n        </Button>\n        <Button onClick={onClose} color=\"secondary\" style={{ margin: 20 }}>\n          {BUTTON_CLOSE}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Header } from \"./Header/Header\";\n\nexport const Home = () => {\n  return <Header />;\n};\n","import React from \"react\";\nimport { ModalContex } from \"./context/ModalContext\";\nimport { Home } from \"./app/screens/Home/Home\";\n\nconst App = () => {\n  return (\n    <ModalContex>\n      <Home />\n    </ModalContex>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}